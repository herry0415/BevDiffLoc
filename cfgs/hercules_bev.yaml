#! lidar 系列
ckpt: 'log/ckpt_000150.pth' #todo  epoch_weights root
seed: 7
exp_name: 'lidar_bev' #todo   lidar_bev // lidar_bev
exp_dir: 'log' #todo  epoch_weights root
sampling_timesteps: 10
bev_fold: 'new_merge_bev' #todo  切换lidar/radar
bev_poses_path: 'new_merge_bev.txt' #todo 切换lidar/radar

# #! radar 系列
# ckpt: 'log_radar/ckpt_000150.pth'  # 65最佳
# seed: 7
# exp_name: 'radar_bev'
# exp_dir: 'log_radar'
# sampling_timesteps: 10
# bev_fold: 'new_merge_bev_radar'
# bev_poses_path: 'new_merge_bev_radar.txt'

train: 
    dataset: 'Hercules' #todo  需要修改 Hercules_radar / Hercules
    # dataset: 'Hercules' #todo  需要修改 Hercules_radar / Hercules
    sequence: 'Library' #todo 需要改
    dataroot: '/home/data/ldq/HeRCULES/'
    batch_size: 16
    val_batch_size: 16
    image_size: [32, 32]
    original_image_size: [32, 32]
    steps: 3
    skip: 2
    use_merge: True #todo usemerge 可以用几张卡
    merge_num: 1
    restart_num: 5
    lr: 5e-4
    weight_decay: 0.01
    epochs: 151
    ckpt_interval: 2  #! 模型保存的间隔
    num_workers: 16
    eval_interval: 5  #! 模型评估的间隔
    print_interval: 50
    persistent_workers: True
    pin_memory: True
    clip_grad: 1.0
    cudnnbenchmark: True

    warmup_sche: True


profile: False


MODEL:
    _target_: models.DiffusionLocModel_bev

    IMAGE_FEATURE_EXTRACTOR: 
        _target_:               models.image_feature_extractor_bev.ImageFeatureExtractor_bev
        backbone:              "vit_small_patch16_384"
        freeze:                 False
        in_channels:            128
        new_patch_size:         [4, 4]
        new_patch_stride:       [4, 4]
        conv_stem:              'ConvStem'  # 'none' or 'ConvStem'
        stem_base_channels:     32
        D_h:                    256         # hidden dimension of the stem
        image_size:             [32, 32]
        decoder:                'linear'
        pretrained_path:        "dinov2_vits14_pretrain.pth"
        reuse_pos_emb:          true
        reuse_patch_emb:        false # no patch embedding as a convolutional stem (ConvStem) is used
        n_cls:                  1

    DENOISER: 
        _target_: models.Denoiser_bev
        TRANSFORMER:
            _target_:               models.denoiser_bev.TransformerEncoderWrapper_bev
            d_model:                512
            nhead:                  4
            num_encoder_layers:     8
            dim_feedforward:        1024
            dropout:                0.1
            batch_first:            True
            norm_first:             True


    DIFFUSER:
        _target_: models.GaussianDiffusion
        beta_schedule: custom

# Data augmentation config
augmentation:
  # flip
  p_flipx: 0.
  p_flipy: 0.5

  # translation
  p_transx: 0.5
  trans_xmin: -5
  trans_xmax: 5
  p_transy: 0.5
  trans_ymin: -3
  trans_ymax: 3
  p_transz: 0.5
  trans_zmin: -1
  trans_zmax: 0.

  # rotation
  p_rot_roll: 0.5
  rot_rollmin: -5
  rot_rollmax: 5
  p_rot_pitch: 0.5
  rot_pitchmin: -5
  rot_pitchmax: 5
  p_rot_yaw: 0.5
  rot_yawmin: -45
  rot_yawmax: 45
